"// Use the new Managed Data Server services to create tables and columns\n// Create a new Managed Data Server and a DataSource based on this server instance\n// The project URL and prefix are required to make sure that tables end up in the correct package\n// this uses the admin api endpoint (/rest/abl/admin/v2/) for all transactions\n// var adminService = adminDataService();\n// var config = {}; // set all the config settings below\n// adminService.configure(config);\n// adminService.createTable();\n// var payload = { 'name':'colname', 'generic_type': 'string', 'size': 20, 'nullable': true };\n// adminService.createColumn(payload);\n// other services\n// adminService.deleteColumn('colname');\n// adminService.deleteTable();\n//\nout = java.lang.System.out;\n\nfunction adminDataService() {\n\n    var result = {};\n    var configSetup = {\n        adminApiKey : '',\n        adminUrl : '',\n        tableName: '',\n        prefix: '',\n        project_url: '',\n        projectIdent: 0\n    };\n\n    result.configure = function configure(myConfig) {\n        configSetup.adminApiKey  = myConfig.adminApiKey || 'demo_full';  // supply, or default\n        configSetup.adminUrl \t = myConfig.adminUrl \t|| 'http://localhost:8080/APIServer/rest/abl/admin/v2/';\n        configSetup.project_url  = myConfig.project_url || 'demo';\n        configSetup.prefix \t\t = myConfig.prefix \t\t|| 'main';\n        configSetup.tableName \t = myConfig.tableName \t|| 'MyTestTable1';\n        configSetup.projectIdent = myConfig.projectIdent|| 0 ;\n    };\n\n    result.adminAuthWithURL = function adminAuthWithURL(url, username, password) {\n        configSetup.adminUrl = url;\n        return result.adminAuth(username,password);\n    \n    };\n    \n\tresult.adminAuth = function adminAuth(username, password) {\n\t    var postJson = {};\n\t    var adminkey = null;\n\t\tvar url = configSetup.adminUrl + \"/@authentication\";\n\t\tvar payload = { \n\t\t\t'username':  username , \n\t\t\t'password':  password \n\t\t};\n\t\tvar errorMsg = null;\n        var params = null;\n        var settings = {\n            headers : {\n                'Content-Type' : 'application/json'\n            }\n        };\n\n        try {\n                out.println(\"adminAuth -  payload \" + JSON.stringify(payload,null,2));\n                out.println(\"... via Rest URL: \" + url);\n                out.println(\"... using settings: \" + JSON.stringify(settings));\n                var authAttempt = SysUtility.restPost(url, params, settings, payload);\n                out.println(authAttempt);\n                postJson = JSON.parse(authAttempt);\n                adminkey = postJson.apikey;\n        }\n        catch (e) {\n            errorMsg = e.message;\n        }\n\n        var response = {\n            errorMessage : errorMsg,\n            response: postJson\n        };\n       \n\t\treturn adminkey;\t\t\n\t};\n\t\n\tresult.getProjectIdent = function getProjectIdent(project_url) {\n\t\tvar ident = configSetup.projectIdent;\n\t\tif(ident === 0 ) {\n\t\t\tvar url = configSetup.adminUrl + \"/admin:projects?sysfilter=equal(url_name:'\" + project_url + \"')\";\n\t\t\tvar json = result.adminGet(url);\n\t\t\tif(json.hasOwnProperty(\"response\")){\n\t\t\t\tident = json.response[0].ident;\n\t\t\t\tconfigSetup.projectIdent = ident;\n\t\t\t}\n\t\t}\n\t\treturn ident;\n\t};\n\t\n\t//uses the config setup\n\tresult.createNewTable = function createNewTable() {\n\t    out.println(\"CREATE NEW TABLE :\"+configSetup.prefix +\":\"+ configSetup.tableName);\n\t\treturn result.createTable(configSetup.tableName, configSetup.project_url, configSetup.prefix);\n\t};\n\t\n\tresult.createTable = function createTable(tablename,project_url,prefix) {\n\t\tvar projectIdent = result.getProjectIdent(project_url);\n\t\tvar url = configSetup.adminUrl + '/@tables/' + prefix + '?projectId='+projectIdent;\n\t\tvar payload = { \n\t\t\t'entity':  tablename \n\t\t};\n\t\treturn result.adminPost(url, payload);\n\t};\n\t/// payload { 'name':'colname', 'generic_type': 'string', 'size': 20, 'nullable': true }\n\tresult.createNewColumn = function createNewColumn(columnPayload) {\n\t     out.println(\"CREATE NEW COLUMN :\"+configSetup.prefix +\":\"+ configSetup.tableName);\n\t\treturn result.createColumn(configSetup.tableName, configSetup.project_url, configSetup.prefix, columnPayload);\n\t};\n\t\n\tresult.createColumn = function createColumn(tablename, project_url, prefix, columnPayload) {\n\t\tvar projectIdent = result.getProjectIdent(project_url);\n\t\tvar response = \"\";\n\t\tvar url = configSetup.adminUrl + '/@columns/' + prefix + \":\"+ tablename +'?projectId='+projectIdent;\n\t\tif(Array.isArray(columnPayload) && columnPayload.length > 0 ){\n\t\t\tfor(var row in columnPayload) {\n\t\t\t\tresponse += result.adminPost(url , row);\n\t\t\t\tresponse += \"\\n\";\n\t\t\t}\n\t\t} else {\n\t\t\tresponse = result.adminPost(url , columnPayload);\n\t\t}\n\t\treturn response;\n\t};\n\n\tresult.deleteTable = function deleteTable() {\n\t\treturn result.deleteExistingTable(configSetup.tableName,configSetup.project_url,configSetup.prefix);\n\t};\n\t\n\tresult.deleteExistingTable = function deleteExistingTable(tablename,project_url,prefix) {\n\t\tvar projectIdent = result.getProjectIdent(project_url);\n\t\tvar url = configSetup.adminUrl + '/@tables/' + prefix + ':' + tablename+ '?projectId='+projectIdent;\n\t\treturn result.adminDelete(url);\n\t};\n\t\n\tresult.deleteColumn = function deleteColumn(columnName) {\n\t\treturn result.deleteExistingColumn(configSetup.tableName,configSetup.project_url,configSetup.prefix,columnName);\n\t};\n\t\n\tresult.deleteExistingColumn = function deleteExistingColumn(tablename,project_url,prefix,columnName) {\n\t\tvar projectIdent = result.getProjectIdent(project_url);\n\t\tvar url = configSetup.adminUrl + '/@columns/' + prefix + ':' + tablename + '/'+ columnName + '?projectId='+projectIdent;\n\t\treturn result.adminDelete(url);\n\t};\n\t\n    result.adminPost = function adminPost(url, payload) {\n      \n        var roles = [];\n        var postJson = {};\n        var errorMsg = null;\n        var params = null;\n        var settings = {\n            headers : {\n                'Authorization' : 'CALiveAPICreator ' + configSetup.adminApiKey + ':1',\n                'Content-Type' : 'application/json'\n            }\n        };\n\n        try {\n                out.println(\"adminPost -  payload \" + JSON.stringify(payload,null,2));\n                out.println(\"... via Rest URL: \" + url);\n                out.println(\"... using settings: \" + JSON.stringify(settings));\n                var postAttempt = SysUtility.restPost(url, params, settings, payload);\n                out.println(postAttempt);\n                postJson = JSON.parse(postAttempt);\n                \n        }\n        catch (e) {\n            errorMsg = e.message;\n        }\n\n        var response = {\n            errorMessage : errorMsg,\n            response: postJson\n        };\n        return response;\n    };\n\n\t result.adminGet = function adminPost(url) {\n\n        out.println(\"adminPost called...\");\n\n        var roles = [];\n        var getResponse = {};\n        var errorMsg = null;\n        var params = null;\n        var settings = {\n            headers : {\n                'Authorization' : 'CALiveAPICreator ' + configSetup.adminApiKey + ':1'\n            }\n        };\n\n        try {\n                out.println(\"adminGet - \");\n                out.println(\"... via Rest URL: \" + url);\n                out.println(\"... using settings: \" + JSON.stringify(settings));\n                var getAttempt = SysUtility.restGet(url, params, settings);\n                out.println(getAttempt);\n                getResponse = JSON.parse(getAttempt);\n                \n        }\n        catch (e) {\n            errorMsg = e.message;\n        }\n\n        var response = {\n            errorMessage : errorMsg,\n            response: getResponse\n        };\n        return response;\n    };\n    \n    result.adminDelete = function adminDelete(url) {\n      \n        var roles = [];\n        var deleteJson = {};\n        var errorMsg = null;\n        var params = null;\n        var settings = {\n            headers : {\n                'Authorization' : 'CALiveAPICreator ' + configSetup.adminApiKey + ':1',\n                'Content-Type' : 'application/json'\n            }\n        };\n\n        try {\n                out.println(\"adminDelete \");\n                out.println(\"... via Rest URL: \" + url);\n                out.println(\"... using settings: \" + JSON.stringify(settings));\n                var deleteAttempt = SysUtility.restDelete(url, params, settings);\n                out.println(deleteAttempt);\n                deleteJson = JSON.parse(deleteAttempt);\n                \n        }\n        catch (e) {\n            errorMsg = e.message;\n        }\n\n        var response = {\n            errorMessage : errorMsg,\n            response: deleteJson\n        };\n        return response;\n    };\n    \n    return result;  \n}\n"