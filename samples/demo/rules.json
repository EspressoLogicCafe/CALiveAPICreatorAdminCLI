[
  {
    "ts": "2016-08-01T19:13:13.614",
    "entity_name": "demo:customer",
    "attribute_name": null,
    "prop1": null,
    "prop2": null,
    "prop3": null,
    "prop4": "javascript",
    "prop5": null,
    "rule_text1": "return row.balance <= row.credit_limit;",
    "rule_text2": "Customer {name}'s balance: {balance|#,##0.00} exceeds their credit limit: {credit_limit|#,##0.00}",
    "rule_text3": null,
    "rule_text4": null,
    "rule_text5": null,
    "predicate": null,
    "name": null,
    "auto_name": "Validation return row.balance <= row.credit_limit;",
    "verbs": null,
    "comments": "balance cannot exceed credit limit, else throw exception",
    "active": true,
    "sqlable": false,
    "jit": false,
    "ruletype_ident": 5,
    "@metadata": {
      "href": "http://localhost:8080/rest/abl/admin/v2/admin:rules/2000",
      "checksum": "A:fdd6caf45b3afd7c"
    }
  },
  {
    "ts": "2016-08-01T19:13:13.691",
    "entity_name": "demo:customer",
    "attribute_name": null,
    "prop1": null,
    "prop2": null,
    "prop3": null,
    "prop4": "javascript",
    "prop5": null,
    "rule_text1": "var detail = {\n        filter: \"{_id: \\\"32751\\\"}\" ,\n        order: \"\",\n        pagesize: 30,\n        offset: 0,\n        verbose: false\n};\n\nvar response =  SysUtility.getResource('zipcodes', detail);\nlog.debug(JSON.stringify(response,null,2));\nlog.debug(response[0].state);\nlog.debug(response[0].city);\n//log.debug(response[0].loc);",
    "rule_text2": null,
    "rule_text3": null,
    "rule_text4": null,
    "rule_text5": null,
    "predicate": null,
    "name": "Lookup city and state from zip code",
    "auto_name": "Event: var detail = {\n        filter: \"{_id: \\\"32751\\\"}\" ,\n        order: \"\",\n        pagesize: 30,\n        offset: 0,\n        verbose: false\n};\n\nv...",
    "verbs": "INSERT,UPDATE,",
    "comments": null,
    "active": false,
    "sqlable": false,
    "jit": false,
    "ruletype_ident": 7,
    "@metadata": {
      "href": "http://localhost:8080/rest/abl/admin/v2/admin:rules/2001",
      "checksum": "A:fdd6caf45b3afd7c"
    }
  },
  {
    "ts": "2016-08-01T19:13:13.694",
    "entity_name": "demo:customer",
    "attribute_name": "balance",
    "prop1": null,
    "prop2": null,
    "prop3": null,
    "prop4": null,
    "prop5": null,
    "rule_text1": "PurchaseOrderList",
    "rule_text2": "paid = false",
    "rule_text3": "amount_total",
    "rule_text4": null,
    "rule_text5": null,
    "predicate": null,
    "name": null,
    "auto_name": "Derive balance as sum(PurchaseOrderList.amount_total where paid = false)",
    "verbs": null,
    "comments": "A rule is like a spreadsheet cell formula... it *reacts\" to changes in referenced data...\n* increased when order placed\n* decreased when order deleted... or paid\n* adjusted when order changed... or assigned to a new customer",
    "active": true,
    "sqlable": false,
    "jit": false,
    "ruletype_ident": 1,
    "@metadata": {
      "href": "http://localhost:8080/rest/abl/admin/v2/admin:rules/2002",
      "checksum": "A:fdd6caf45b3afd7c"
    }
  },
  {
    "ts": "2016-08-01T19:13:13.697",
    "entity_name": "demo:LineItem",
    "attribute_name": "amount",
    "prop1": null,
    "prop2": null,
    "prop3": null,
    "prop4": "javascript",
    "prop5": null,
    "rule_text1": "if (row.qty_ordered <= 6)  // discount (using conditional JavaScript logic)\n   return row.product_price * row.qty_ordered;\nelse\n   return row.product_price * row.qty_ordered * 0.8;\n",
    "rule_text2": null,
    "rule_text3": null,
    "rule_text4": null,
    "rule_text5": null,
    "predicate": null,
    "name": "Discounted price*qty",
    "auto_name": "Derive amount as if (row.qty_ordered <= 6)  // discount (using conditional JavaScript logic)\n   return row.product_price * row.qty_ordered;\nelse\n  ...",
    "verbs": null,
    "comments": "Reactive Logic is expressed in JavaScript, so you use...\n- conditional logic (as above),\n- standard JavaScript services (e.g., moment date functions - enable in Project > Libraries),\n- SQL / external services.... whatever is required.",
    "active": true,
    "sqlable": false,
    "jit": false,
    "ruletype_ident": 3,
    "@metadata": {
      "href": "http://localhost:8080/rest/abl/admin/v2/admin:rules/2003",
      "checksum": "A:fdd6caf45b3afd7c"
    }
  },
  {
    "ts": "2016-08-01T19:13:13.701",
    "entity_name": "demo:LineItem",
    "attribute_name": "product_price",
    "prop1": null,
    "prop2": null,
    "prop3": null,
    "prop4": null,
    "prop5": null,
    "rule_text1": "product",
    "rule_text2": "price",
    "rule_text3": null,
    "rule_text4": null,
    "rule_text5": null,
    "predicate": null,
    "name": null,
    "auto_name": "Derive product_price as parentcopy(product.price)",
    "verbs": null,
    "comments": "Parent copy means order unaffected by product price changes",
    "active": true,
    "sqlable": false,
    "jit": false,
    "ruletype_ident": 4,
    "@metadata": {
      "href": "http://localhost:8080/rest/abl/admin/v2/admin:rules/2004",
      "checksum": "A:fdd6caf45b3afd7c"
    }
  },
  {
    "ts": "2016-08-01T19:13:13.71",
    "entity_name": "demo:PurchaseOrder",
    "attribute_name": null,
    "prop1": null,
    "prop2": null,
    "prop3": null,
    "prop4": "javascript",
    "prop5": null,
    "rule_text1": "if (row.amount_total != oldRow.amount_total) {\n  var newPurchaseorder_audit = logicContext.createPersistentBean(\"purchaseorder_audit\");\n  newPurchaseorder_audit.amount_total = oldRow.amount_total;  // set attributes from old values\n  newPurchaseorder_audit.paid = oldRow.paid;\n  newPurchaseorder_audit.customer_name = oldRow.customer_name;\n  newPurchaseorder_audit.order_number = oldRow.order_number;  // set the foreign key\n  logicContext.insert(newPurchaseorder_audit);                // saves (fires logic)\n}\n// better: re-use alternative using Loadable Libraries\n// if (row.amount_total != oldRow.amount_total)\n//   SysLogic.insertChildFrom(\"purchaseorder_audit\", logicContext);",
    "rule_text2": null,
    "rule_text3": null,
    "rule_text4": null,
    "rule_text5": null,
    "predicate": null,
    "name": "Audit Purchase Order amount changes",
    "auto_name": "Event: if (row.amount_total != oldRow.amount_total) {\n  var newPurchaseorder_audit = logicContext.createPersistentBean(\"purchaseorder_audit\");\n  ne...",
    "verbs": "UPDATE,",
    "comments": "row, logicContext passed in from engine; initialVerb is *client* action (e.g., POST), irrespective of subsequent updates (e.g., from item adjustments)\nearly events execute before reactive expressions, events execute after reactive expressions, commit events execute after all rows are processed",
    "active": true,
    "sqlable": false,
    "jit": false,
    "ruletype_ident": 7,
    "@metadata": {
      "href": "http://localhost:8080/rest/abl/admin/v2/admin:rules/2005",
      "checksum": "A:fdd6caf45b3afd7c"
    }
  },
  {
    "ts": "2016-08-01T19:13:13.74",
    "entity_name": "demo:PurchaseOrder",
    "attribute_name": "amount_total",
    "prop1": null,
    "prop2": null,
    "prop3": null,
    "prop4": null,
    "prop5": null,
    "rule_text1": "LineItemList",
    "rule_text2": null,
    "rule_text3": "amount",
    "rule_text4": null,
    "rule_text5": null,
    "predicate": null,
    "name": null,
    "auto_name": "Derive amount_total as sum(LineItemList.amount)",
    "verbs": null,
    "comments": "sum of line item amounts",
    "active": true,
    "sqlable": false,
    "jit": false,
    "ruletype_ident": 1,
    "@metadata": {
      "href": "http://localhost:8080/rest/abl/admin/v2/admin:rules/2006",
      "checksum": "A:fdd6caf45b3afd7c"
    }
  }
]